class Solution {
    public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {
        HashMap<Integer, Queue<Integer>> out= new HashMap<>();
        int max= 0;
        for(int i=0; i<R; i++){
            for(int j=0; j<C; j++){
                int dist = Math.abs(r0-i)+ Math.abs(c0-j);
                if(max<dist) max = dist;
                if(out.containsKey(dist)){
                    out.get(dist).add(i);
                    out.get(dist).add(j);
                }
                else{
                    out.put(dist, new LinkedList<>());
                    out.get(dist).add(i);
                    out.get(dist).add(j);
                }
            }
        }
            int[][] ret = new int[R*C][2];
            int m=0;
            for(int i=0; i<=max; i++){
                Queue<Integer> temp = out.get(i);
                while(!temp.isEmpty()){
                    ret[m][0] = temp.poll();
                    ret[m][1] = temp.poll();
                    m++;
                }
            }
       return ret; 
    }
}